<!DOCTYPE html>
<html lang="pt-BR">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Gerenciador de Tarefas - Selecionar Usuário</title>
    <link rel="stylesheet" href="/css/main.css" />
  </head>
  <body>
    <div class="container">
      <header class="header">
        <h1>Gerenciador de Tarefas</h1>
        <p class="subtitle">Selecione um usuário para continuar</p>
      </header>

      <main class="main-content">
        <div id="loading" class="loading">
          <div class="spinner"></div>
          <p>Carregando usuários...</p>
        </div>

        <div id="users-container" class="users-container" style="display: none">
          <div id="users-list" class="users-list">
            <!-- Os botões dos usuários serão inseridos aqui dinamicamente -->
          </div>
        </div>

        <div id="error-message" class="error-message" style="display: none">
          <p>Erro ao carregar usuários. Tente novamente.</p>
          <button id="retry-btn" class="retry-btn">Tentar Novamente</button>
        </div>

        <div id="no-users" class="no-users" style="display: none">
          <p>Nenhum usuário encontrado.</p>
          <button id="create-user-btn" class="create-user-btn">
            Criar Primeiro Usuário
          </button>
        </div>
      </main>
    </div>

    <script>
      // Elementos do DOM
      const loadingEl = document.getElementById("loading");
      const usersContainerEl = document.getElementById("users-container");
      const usersListEl = document.getElementById("users-list");
      const errorMessageEl = document.getElementById("error-message");
      const noUsersEl = document.getElementById("no-users");
      const retryBtn = document.getElementById("retry-btn");
      const createUserBtn = document.getElementById("create-user-btn");

      // Estado da aplicação
      let users = [];

      // Função para buscar usuários da API
      async function fetchUsers() {
        try {
          showLoading();

          const response = await fetch("/api/users");

          if (!response.ok) {
            throw new Error(`Erro HTTP: ${response.status}`);
          }

          const data = await response.json();
          users = data;

          if (users.length === 0) {
            showNoUsers();
          } else {
            renderUsers();
            showUsers();
          }
        } catch (error) {
          console.error("Erro ao buscar usuários:", error);
          showError();
        }
      }

      // Função para renderizar os usuários
      function renderUsers() {
        usersListEl.innerHTML = "";

        users.forEach((user) => {
          const userBtn = createUserButton(user);
          usersListEl.appendChild(userBtn);
        });
      }

      // Função para criar botão do usuário
      function createUserButton(user) {
        const button = document.createElement("button");
        button.className = "user-btn";
        button.onclick = () => selectUser(user);

        // Gerar iniciais do nome para o avatar
        const initials = getInitials(user.full_name || "Usuário");

        button.innerHTML = `
                <div class="user-avatar">
                    ${initials}
                </div>
                <div class="user-info">
                    <h3>${user.full_name || "Nome não informado"}</h3>
                    <p>${user.email || "Email não informado"}</p>
                </div>
            `;

        return button;
      }

      // Função para gerar iniciais do nome
      function getInitials(name) {
        return name
          .split(" ")
          .map((word) => word.charAt(0).toUpperCase())
          .slice(0, 2)
          .join("");
      }

      // Função para selecionar usuário
      function selectUser(user) {
        console.log("Usuário selecionado:", user);

        // Salvar usuário selecionado no sessionStorage
        sessionStorage.setItem("selectedUser", JSON.stringify(user));

        // Redirecionar para a página de boas-vindas do usuário
        window.location.href = `/users/${user.id}`;
      }

      // Funções para controle de exibição
      function showLoading() {
        hideAllSections();
        loadingEl.style.display = "block";
      }

      function showUsers() {
        hideAllSections();
        usersContainerEl.style.display = "block";
      }

      function showError() {
        hideAllSections();
        errorMessageEl.style.display = "block";
      }

      function showNoUsers() {
        hideAllSections();
        noUsersEl.style.display = "block";
      }

      function hideAllSections() {
        loadingEl.style.display = "none";
        usersContainerEl.style.display = "none";
        errorMessageEl.style.display = "none";
        noUsersEl.style.display = "none";
      }

      // Event listeners
      retryBtn.addEventListener("click", fetchUsers);

      createUserBtn.addEventListener("click", () => {
        // Redirecionar para página de criação de usuário
        alert("Redirecionando para criação de usuário...");
        // window.location.href = '/create-user';
      });

      // Função para recarregar a página
      function refreshPage() {
        fetchUsers();
      }

      // Inicializar a aplicação quando a página carregar
      document.addEventListener("DOMContentLoaded", () => {
        console.log("Página carregada, buscando usuários...");
        fetchUsers();
      });

      // Adicionar listener para recarregar quando a página ficar visível novamente
      document.addEventListener("visibilitychange", () => {
        if (!document.hidden) {
          refreshPage();
        }
      });
    </script>
  </body>
</html>
