<!DOCTYPE html>
<html lang="pt-BR">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Bem-vindo - Gerenciador de Tarefas</title>
    <link rel="stylesheet" href="/css/welcome.css" />
  </head>
  <body>
    <div class="container">
      <div class="welcome-card">
        <div id="loading" class="loading">
          <div class="spinner"></div>
          <p>Carregando informa√ß√µes...</p>
        </div>

        <div id="welcome-content" class="welcome-content" style="display: none">
          <div class="user-profile">
            <div class="user-avatar-large" id="user-avatar"></div>
            <h1 class="welcome-title">Bem-vindo de volta!</h1>
            <h2 class="user-name" id="user-name">Nome do Usu√°rio</h2>
            <p class="user-email" id="user-email">email@exemplo.com</p>
          </div>

          <div class="quick-stats">
            <div class="stat-card">
              <div class="stat-icon">üìã</div>
              <div class="stat-info">
                <span class="stat-number" id="total-tasks">0</span>
                <span class="stat-label">Tarefas Totais</span>
              </div>
            </div>
            <div class="stat-card">
              <div class="stat-icon">‚úÖ</div>
              <div class="stat-info">
                <span class="stat-number" id="completed-tasks">0</span>
                <span class="stat-label">Conclu√≠das</span>
              </div>
            </div>
            <div class="stat-card">
              <div class="stat-icon">‚è≥</div>
              <div class="stat-info">
                <span class="stat-number" id="pending-tasks">0</span>
                <span class="stat-label">Pendentes</span>
              </div>
            </div>
            <div class="stat-card">
              <div class="stat-icon">üìÅ</div>
              <div class="stat-info">
                <span class="stat-number" id="total-projects">0</span>
                <span class="stat-label">Projetos</span>
              </div>
            </div>
          </div>

          <div class="action-buttons">
            <button class="btn btn-primary" onclick="goToTasks()">
              <span class="btn-icon">üìù</span>
              Ver Minhas Tarefas
            </button>
            <button class="btn btn-secondary" onclick="goToProjects()">
              <span class="btn-icon">üìÅ</span>
              Meus Projetos
            </button>
          </div>

          <div class="user-actions">
            <button class="link-btn" onclick="changeUser()">
              üîÑ Trocar de Usu√°rio
            </button>
          </div>
        </div>

        <div id="error-message" class="error-message" style="display: none">
          <div class="error-icon">‚ö†Ô∏è</div>
          <p>Erro ao carregar informa√ß√µes do usu√°rio.</p>
          <button class="btn btn-outline" onclick="retryLoad()">
            Tentar Novamente
          </button>
          <button class="btn btn-secondary" onclick="goHome()">
            Voltar ao In√≠cio
          </button>
        </div>
      </div>
    </div>

    <!-- Modal para criar nova tarefa -->
    <div id="task-modal" class="modal" style="display: none">
      <div class="modal-content">
        <div class="modal-header">
          <h2>Nova Tarefa</h2>
          <span class="close" onclick="closeTaskModal()">&times;</span>
        </div>

        <form id="task-form" class="task-form">
          <div class="form-group">
            <label for="task-name">Nome da Tarefa *</label>
            <input
              type="text"
              id="task-name"
              name="task_name"
              required
              placeholder="Digite o nome da tarefa"
            />
          </div>

          <div class="form-group">
            <label for="task-description">Descri√ß√£o</label>
            <textarea
              id="task-description"
              name="task_description"
              rows="4"
              placeholder="Descreva os detalhes da tarefa (opcional)"
            ></textarea>
          </div>

          <div class="form-row">
            <div class="form-group">
              <label for="task-priority">Prioridade</label>
              <select id="task-priority" name="task_priority">
                <option value="baixa">Baixa</option>
                <option value="media" selected>M√©dia</option>
                <option value="alta">Alta</option>
                <option value="urgente">Urgente</option>
              </select>
            </div>

            <div class="form-group">
              <label for="due-date">Data de Vencimento</label>
              <input type="date" id="due-date" name="due_date" />
            </div>
          </div>

          <div class="form-row">
            <div class="form-group">
              <label for="due-time">Hor√°rio</label>
              <input type="time" id="due-time" name="due_time" />
            </div>

            <div class="form-group">
              <label for="task-project">Projeto</label>
              <select id="task-project" name="project_id">
                <option value="">Sem projeto</option>
                <!-- Projetos ser√£o carregados dinamicamente -->
              </select>
            </div>
          </div>

          <div class="form-group">
            <label class="checkbox-label">
              <input
                type="checkbox"
                id="has-notification"
                name="has_notification"
              />
              <span class="checkmark"></span>
              Receber notifica√ß√£o
            </label>
          </div>

          <div class="form-actions">
            <button
              type="button"
              class="btn btn-secondary"
              onclick="closeTaskModal()"
            >
              Cancelar
            </button>
            <button type="submit" class="btn btn-primary" id="create-task-btn">
              <span class="btn-icon">‚úÖ</span>
              Criar Tarefa
            </button>
          </div>
        </form>

        <div id="task-loading" class="modal-loading" style="display: none">
          <div class="spinner"></div>
          <p>Criando tarefa...</p>
        </div>
      </div>
    </div>

    <script>
      // Obter ID do usu√°rio da URL
      const userId = window.location.pathname.split("/").pop();
      let currentUser = null;

      // Fun√ß√£o para buscar dados do usu√°rio
      async function loadUserData() {
        try {
          showLoading();

          const response = await fetch(`/api/users/${userId}`);

          if (!response.ok) {
            throw new Error(`Erro HTTP: ${response.status}`);
          }

          currentUser = await response.json();
          renderWelcomePage();
          showWelcomeContent();
        } catch (error) {
          console.error("Erro ao carregar dados do usu√°rio:", error);
          showError();
        }
      }

      // Fun√ß√£o para renderizar a p√°gina de boas-vindas
      function renderWelcomePage() {
        if (!currentUser) return;

        // Atualizar nome e email
        document.getElementById("user-name").textContent =
          currentUser.name || "Usu√°rio";
        document.getElementById("user-email").textContent =
          currentUser.email || "Email n√£o informado";

        // Gerar e mostrar avatar
        const initials = getInitials(currentUser.name || "Usu√°rio");
        document.getElementById("user-avatar").textContent = initials;

        // Carregar estat√≠sticas
        loadUserStats();
      }

      // Fun√ß√£o para carregar estat√≠sticas do usu√°rio
      async function loadUserStats() {
        try {
          // Buscar tarefas do usu√°rio
          const tasksResponse = await fetch(`/api/users/${userId}/tasks`);
          const projectsResponse = await fetch(`/api/users/${userId}/projects`);

          let tasks = [];
          let projects = [];

          // Verificar se as requisi√ß√µes foram bem-sucedidas
          if (tasksResponse.ok) {
            tasks = await tasksResponse.json();
            console.log("Tarefas do usu√°rio:", tasks);
          } else {
            console.warn("Erro ao buscar tarefas:", tasksResponse.status);
          }

          if (projectsResponse.ok) {
            projects = await projectsResponse.json();
            console.log("Projetos do usu√°rio:", projects);
          } else {
            console.warn("Erro ao buscar projetos:", projectsResponse.status);
          }

          // Calcular estat√≠sticas das tarefas
          const totalTasks = tasks.length;
          const completedTasks = tasks.filter(
            (task) =>
              task.status === "completed" ||
              task.completed === true ||
              task.is_completed === true ||
              task.status === "conclu√≠da"
          ).length;
          const pendingTasks = totalTasks - completedTasks;

          // Atualizar estat√≠sticas de projetos tamb√©m
          const totalProjects = projects.length;

          // Animar os n√∫meros das tarefas
          animateNumber("total-tasks", totalTasks);
          animateNumber("completed-tasks", completedTasks);
          animateNumber("pending-tasks", pendingTasks);
          animateNumber("total-projects", totalProjects);
        } catch (error) {
          console.error("Erro ao carregar estat√≠sticas:", error);

          // Em caso de erro, manter valores padr√£o
          animateNumber("total-tasks", 0);
          animateNumber("completed-tasks", 0);
          animateNumber("pending-tasks", 0);
          animateNumber("total-projects", 0);
        }
      }

      // Fun√ß√£o para animar n√∫meros
      function animateNumber(elementId, targetValue) {
        const element = document.getElementById(elementId);
        if (!element) return;

        const duration = 1000;
        const increment = targetValue / (duration / 50);
        let currentValue = 0;

        const timer = setInterval(() => {
          currentValue += increment;
          if (currentValue >= targetValue) {
            currentValue = targetValue;
            clearInterval(timer);
          }
          element.textContent = Math.floor(currentValue);
        }, 50);
      }

      // Fun√ß√£o para gerar iniciais
      function getInitials(name) {
        return name
          .split(" ")
          .map((word) => word.charAt(0).toUpperCase())
          .slice(0, 2)
          .join("");
      }

      // Fun√ß√µes de controle de exibi√ß√£o
      function showLoading() {
        hideAllSections();
        document.getElementById("loading").style.display = "block";
      }

      function showWelcomeContent() {
        hideAllSections();
        document.getElementById("welcome-content").style.display = "block";
      }

      function showError() {
        hideAllSections();
        document.getElementById("error-message").style.display = "block";
      }

      function hideAllSections() {
        document.getElementById("loading").style.display = "none";
        document.getElementById("welcome-content").style.display = "none";
        document.getElementById("error-message").style.display = "none";
      }

      function goToTasks() {
        sessionStorage.setItem("selectedUser", JSON.stringify(currentUser));
        console.log("Redirecionando para:", `/users/${userId}/tasks`);
        window.location.href = `/users/${userId}/tasks`;
      }

      function goToProjects() {
        sessionStorage.setItem("selectedUser", JSON.stringify(currentUser));
        console.log("Redirecionando para:", `/users/${userId}/projects`);
        window.location.href = `/users/${userId}/projects`;
      }

      function changeUser() {
        sessionStorage.removeItem("selectedUser");
        window.location.href = "/";
      }

      function retryLoad() {
        loadUserData();
      }

      function goHome() {
        window.location.href = "/";
      }

      // Fun√ß√µes do Modal de Tarefa
      async function openTaskModal() {
        document.getElementById("task-modal").style.display = "flex";
        document.body.style.overflow = "hidden";

        // Limpar formul√°rio
        document.getElementById("task-form").reset();

        // Carregar projetos no select
        await loadProjectsForSelect();
      }

      function closeTaskModal() {
        document.getElementById("task-modal").style.display = "none";
        document.body.style.overflow = "auto";

        // Limpar formul√°rio
        document.getElementById("task-form").reset();
      }

      // Carregar projetos para o select
      async function loadProjectsForSelect() {
        try {
          const response = await fetch(`/api/users/${userId}/projects`);

          if (response.ok) {
            const projects = await response.json();
            const projectSelect = document.getElementById("task-project");

            // Limpar op√ß√µes existentes
            projectSelect.innerHTML = '<option value="">Sem projeto</option>';

            // Adicionar projetos
            projects.forEach((project) => {
              const option = document.createElement("option");
              option.value = project.id;
              option.textContent =
                project.project_name || project.name || `Projeto ${project.id}`;
              projectSelect.appendChild(option);
            });
          }
        } catch (error) {
          console.error("Erro ao carregar projetos:", error);
        }
      }

      // Fun√ß√µes auxiliares do modal
      function showTaskLoading() {
        document.getElementById("task-loading").style.display = "block";
        document.getElementById("create-task-btn").disabled = true;
      }

      function hideTaskLoading() {
        document.getElementById("task-loading").style.display = "none";
        document.getElementById("create-task-btn").disabled = false;
      }

      function showSuccessMessage(message) {
        const toast = document.createElement("div");
        toast.className = "toast toast-success";
        toast.innerHTML = `
          <span class="toast-icon">‚úÖ</span>
          <span>${message}</span>
        `;

        document.body.appendChild(toast);

        setTimeout(() => toast.classList.add("show"), 100);

        setTimeout(() => {
          toast.classList.remove("show");
          setTimeout(() => document.body.removeChild(toast), 300);
        }, 3000);
      }

      function showErrorMessage(message) {
        const toast = document.createElement("div");
        toast.className = "toast toast-error";
        toast.innerHTML = `
          <span class="toast-icon">‚ùå</span>
          <span>${message}</span>
        `;

        document.body.appendChild(toast);

        setTimeout(() => toast.classList.add("show"), 100);

        setTimeout(() => {
          toast.classList.remove("show");
          setTimeout(() => document.body.removeChild(toast), 300);
        }, 4000);
      }

      // Inicializar quando a p√°gina carregar
      document.addEventListener("DOMContentLoaded", () => {
        console.log("Carregando dados do usu√°rio:", userId);
        loadUserData();
        loadProjectsForSelect();
      });

      // Event listener para submiss√£o do formul√°rio - CORRIGIDO
      document
        .getElementById("task-form")
        .addEventListener("submit", async (e) => {
          e.preventDefault();

          const formData = new FormData(e.target);
          const projectId = formData.get("project_id");

          // CORRE√á√ÉO: Estrutura de dados corrigida
          const taskData = {
            task_name: formData.get("task_name"),
            task_description: formData.get("task_description") || null,
            due_date: formData.get("due_date") || null,
            due_time: formData.get("due_time") || null,
            has_notification: formData.get("has_notification") === "on",
            task_priority: formData.get("task_priority"),
            is_completed: false,
            user_id: parseInt(userId),
          };

          // S√≥ adicionar project_id se um projeto foi selecionado
          if (projectId && projectId !== "") {
            taskData.project_id = parseInt(projectId);
          }

          console.log("Dados enviados:", taskData);

          try {
            showTaskLoading();

            const response = await fetch(`/api/users/${userId}/tasks`, {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify(taskData),
            });

            if (response.ok) {
              const newTask = await response.json();
              console.log("Tarefa criada:", newTask);

              closeTaskModal();
              showSuccessMessage("Tarefa criada com sucesso!");
              loadUserStats();
            } else {
              const errorData = await response.json();
              throw new Error(errorData.error || "Erro ao criar tarefa");
            }
          } catch (error) {
            console.error("Erro ao criar tarefa:", error);
            showErrorMessage(error.message);
          } finally {
            hideTaskLoading();
          }
        });

      // Fechar modal ao clicar fora dele
      document.getElementById("task-modal").addEventListener("click", (e) => {
        if (e.target.id === "task-modal") {
          closeTaskModal();
        }
      });
    </script>
  </body>
</html>
