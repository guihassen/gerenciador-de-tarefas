<!DOCTYPE html>
<html lang="pt-BR">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Meus Projetos - Gerenciador de Tarefas</title>
    <link rel="stylesheet" href="/css/projects.css" />
  </head>
  <body>
    <div class="container">
      <!-- Header -->
      <header class="header">
        <div class="header-content">
          <div class="user-info">
            <div class="user-avatar" id="user-avatar">U</div>
            <div class="user-details">
              <h1 id="user-name">Carregando...</h1>
              <p id="user-email">email@exemplo.com</p>
            </div>
          </div>
          <div class="header-actions">
            <button class="btn btn-primary" onclick="openCreateProjectModal()">
              <span class="btn-icon">‚ûï</span>
              Novo Projeto
            </button>
            <button class="btn btn-outline" onclick="goToTasks()">
              <span class="btn-icon">üìã</span>
              Tarefas
            </button>
            <button class="btn btn-outline" onclick="goToWelcome()">
              <span class="btn-icon">üè†</span>
              Dashboard
            </button>
          </div>
        </div>
      </header>

      <!-- Main Content -->
      <main class="main-content">
        <!-- Loading State -->
        <div id="loading" class="loading">
          <div class="spinner"></div>
          <p>Carregando seus projetos...</p>
        </div>

        <!-- Projects Content -->
        <div
          id="projects-content"
          class="projects-content"
          style="display: none"
        >
          <!-- Stats Cards -->
          <div class="stats-overview">
            <div class="stat-card stat-total">
              <div class="stat-icon">üìÅ</div>
              <div class="stat-info">
                <span class="stat-number" id="total-projects">0</span>
                <span class="stat-label">Total</span>
              </div>
            </div>
            <div class="stat-card stat-active">
              <div class="stat-icon">üöÄ</div>
              <div class="stat-info">
                <span class="stat-number" id="active-projects">0</span>
                <span class="stat-label">Ativos</span>
              </div>
            </div>
            <div class="stat-card stat-completed">
              <div class="stat-icon">‚úÖ</div>
              <div class="stat-info">
                <span class="stat-number" id="completed-projects">0</span>
                <span class="stat-label">Conclu√≠dos</span>
              </div>
            </div>
            <div class="stat-card stat-paused">
              <div class="stat-icon">‚è∏Ô∏è</div>
              <div class="stat-info">
                <span class="stat-number" id="paused-projects">0</span>
                <span class="stat-label">Pausados</span>
              </div>
            </div>
          </div>

          <!-- Filters -->
          <div class="filters-section">
            <div class="filters">
              <select id="filter-status" class="filter-select">
                <option value="all">Todos os projetos</option>
                <option value="ativo">Ativos</option>
                <option value="concluido">Conclu√≠dos</option>
                <option value="pausado">Pausados</option>
              </select>
              <input
                type="text"
                id="search-projects"
                class="search-input"
                placeholder="Buscar projetos..."
              />
            </div>
          </div>

          <!-- Projects List -->
          <div class="projects-section">
            <div id="projects-list" class="projects-list">
              <!-- Projects will be rendered here -->
            </div>
          </div>
        </div>

        <!-- Empty State -->
        <div id="empty-state" class="empty-state" style="display: none">
          <div class="empty-icon">üìÅ</div>
          <h2>Nenhum projeto encontrado</h2>
          <p>Comece criando seu primeiro projeto!</p>
          <button class="btn btn-primary" onclick="openCreateProjectModal()">
            <span class="btn-icon">‚ûï</span>
            Criar Primeiro Projeto
          </button>
        </div>

        <!-- Error State -->
        <div id="error-state" class="error-state" style="display: none">
          <div class="error-icon">‚ö†Ô∏è</div>
          <h2>Erro ao carregar projetos</h2>
          <p>Tente novamente em alguns instantes.</p>
          <button class="btn btn-outline" onclick="loadProjects()">
            <span class="btn-icon">üîÑ</span>
            Tentar Novamente
          </button>
        </div>
      </main>
    </div>

    <!-- Modal para criar/editar projeto -->
    <div id="project-modal" class="modal" style="display: none">
      <div class="modal-content">
        <div class="modal-header">
          <h2 id="modal-title">Novo Projeto</h2>
          <span class="close" onclick="closeProjectModal()">&times;</span>
        </div>

        <form id="project-form" class="project-form">
          <input type="hidden" id="project-id" name="id" />

          <div class="form-group">
            <label for="project-name">Nome do Projeto *</label>
            <input
              type="text"
              id="project-name"
              name="project_name"
              required
              maxlength="100"
              placeholder="Digite o nome do projeto"
            />
          </div>

          <div class="form-group">
            <label for="project-description">Descri√ß√£o</label>
            <textarea
              id="project-description"
              name="description"
              rows="4"
              placeholder="Descreva os objetivos e detalhes do projeto (opcional)"
            ></textarea>
          </div>

          <div class="form-group">
            <label for="project-status">Status</label>
            <select id="project-status" name="project_status" required>
              <option value="ativo">Ativo</option>
              <option value="pausado">Pausado</option>
              <option value="concluido">Conclu√≠do</option>
            </select>
          </div>

          <div class="form-actions">
            <button
              type="button"
              class="btn btn-secondary"
              onclick="closeProjectModal()"
            >
              Cancelar
            </button>
            <button
              type="submit"
              class="btn btn-primary"
              id="submit-project-btn"
            >
              <span class="btn-icon" id="submit-icon">‚úÖ</span>
              <span id="submit-text">Criar Projeto</span>
            </button>
          </div>
        </form>

        <div
          id="project-modal-loading"
          class="modal-loading"
          style="display: none"
        >
          <div class="spinner"></div>
          <p>Processando...</p>
        </div>
      </div>
    </div>

    <script>
      // Vari√°veis globais
      const userId = window.location.pathname.split("/")[2];
      let currentUser = null;
      let allProjects = [];
      let filteredProjects = [];
      let isEditMode = false;
      let editingProjectId = null;

      // Inicializa√ß√£o
      document.addEventListener("DOMContentLoaded", () => {
        console.log("Carregando p√°gina de projetos para usu√°rio:", userId);
        loadUserData();
        loadProjects();
        setupEventListeners();
      });

      // Carregar dados do usu√°rio
      async function loadUserData() {
        try {
          const response = await fetch(`/api/users/${userId}`);
          if (response.ok) {
            currentUser = await response.json();
            renderUserInfo();
          }
        } catch (error) {
          console.error("Erro ao carregar dados do usu√°rio:", error);
        }
      }

      // Renderizar informa√ß√µes do usu√°rio
      function renderUserInfo() {
        if (!currentUser) return;

        document.getElementById("user-name").textContent =
          currentUser.name || "Usu√°rio";
        document.getElementById("user-email").textContent =
          currentUser.email || "Email n√£o informado";

        const initials = getInitials(currentUser.name || "Usu√°rio");
        document.getElementById("user-avatar").textContent = initials;
      }

      // Gerar iniciais
      function getInitials(name) {
        return name
          .split(" ")
          .map((word) => word.charAt(0).toUpperCase())
          .slice(0, 2)
          .join("");
      }

      // Carregar projetos
      async function loadProjects() {
        try {
          showLoading();

          const response = await fetch(`/api/users/${userId}/projects`);

          if (!response.ok) {
            throw new Error(`Erro HTTP: ${response.status}`);
          }

          allProjects = await response.json();
          console.log("Projetos carregados:", allProjects);

          if (allProjects.length === 0) {
            showEmptyState();
          } else {
            filteredProjects = [...allProjects];
            renderStats();
            renderProjects();
            showProjectsContent();
          }
        } catch (error) {
          console.error("Erro ao carregar projetos:", error);
          showErrorState();
        }
      }

      // Renderizar estat√≠sticas
      function renderStats() {
        const total = allProjects.length;
        const active = allProjects.filter(
          (project) => project.project_status === "ativo" && project.is_active
        ).length;
        const completed = allProjects.filter(
          (project) => project.project_status === "concluido"
        ).length;
        const paused = allProjects.filter(
          (project) => project.project_status === "pausado"
        ).length;

        animateNumber("total-projects", total);
        animateNumber("active-projects", active);
        animateNumber("completed-projects", completed);
        animateNumber("paused-projects", paused);
      }

      // Animar n√∫meros
      function animateNumber(elementId, targetValue) {
        const element = document.getElementById(elementId);
        if (!element) return;

        const duration = 800;
        const increment = targetValue / (duration / 50);
        let currentValue = 0;

        const timer = setInterval(() => {
          currentValue += increment;
          if (currentValue >= targetValue) {
            currentValue = targetValue;
            clearInterval(timer);
          }
          element.textContent = Math.floor(currentValue);
        }, 50);
      }

      // Renderizar lista de projetos
      function renderProjects() {
        const projectsList = document.getElementById("projects-list");
        projectsList.innerHTML = "";

        if (filteredProjects.length === 0) {
          projectsList.innerHTML = `
            <div class="no-results">
              <p>Nenhum projeto encontrado com os filtros aplicados.</p>
            </div>
          `;
          return;
        }

        filteredProjects.forEach((project) => {
          const projectCard = createProjectCard(project);
          projectsList.appendChild(projectCard);
        });
      }

      // Criar card de projeto
      function createProjectCard(project) {
        const projectCard = document.createElement("div");
        projectCard.className = `project-card ${
          project.project_status === "concluido" ? "completed" : ""
        } ${!project.is_active ? "inactive" : ""}`;
        projectCard.setAttribute("data-project-id", project.id);

        const statusClass = getStatusClass(project.project_status);
        const statusText = getStatusText(project.project_status);

        projectCard.innerHTML = `
          <div class="project-header">
            <div class="project-info">
              <h3 class="project-title">${project.project_name}</h3>
              <div class="project-status ${statusClass}">
                <span>${getStatusIcon(project.project_status)}</span>
                <span>${statusText}</span>
              </div>
            </div>
            ${
              !project.is_active
                ? '<div class="inactive-badge">Inativo</div>'
                : ""
            }
          </div>
          
          ${
            project.description
              ? `<p class="project-description">${project.description}</p>`
              : ""
          }
          
          <div class="project-actions">
            <button class="action-btn edit-btn" onclick="editProject(${
              project.id
            })" title="Editar">
              <span>‚úèÔ∏è</span>
              <span>Editar</span>
            </button>
            <button class="action-btn delete-btn" onclick="deleteProject(${
              project.id
            })" title="Excluir">
              <span>üóëÔ∏è</span>
              <span>Excluir</span>
            </button>
            ${
              project.is_active
                ? `<button class="action-btn deactivate-btn" onclick="toggleProjectStatus(${project.id}, false)" title="Desativar">
                <span>‚è∏Ô∏è</span>
                <span>Desativar</span>
              </button>`
                : `<button class="action-btn activate-btn" onclick="toggleProjectStatus(${project.id}, true)" title="Ativar">
                <span>‚ñ∂Ô∏è</span>
                <span>Ativar</span>
              </button>`
            }
          </div>
        `;

        return projectCard;
      }

      // Fun√ß√µes auxiliares para status
      function getStatusClass(status) {
        const classes = {
          ativo: "status-active",
          concluido: "status-completed",
          pausado: "status-on-hold",
        };
        return classes[status] || "status-active";
      }

      function getStatusText(status) {
        const texts = {
          ativo: "Ativo",
          concluido: "Conclu√≠do",
          pausado: "Pausado",
        };
        return texts[status] || "Ativo";
      }

      function getStatusIcon(status) {
        const icons = {
          ativo: "üöÄ",
          concluido: "‚úÖ",
          pausado: "‚è∏Ô∏è",
        };
        return icons[status] || "üöÄ";
      }

      // Editar projeto
      function editProject(projectId) {
        const project = allProjects.find((p) => p.id === projectId);
        if (!project) return;

        isEditMode = true;
        editingProjectId = projectId;

        // Preencher formul√°rio
        document.getElementById("modal-title").textContent = "Editar Projeto";
        document.getElementById("submit-text").textContent =
          "Salvar Altera√ß√µes";
        document.getElementById("submit-icon").textContent = "üíæ";

        document.getElementById("project-id").value = project.id;
        document.getElementById("project-name").value = project.project_name;
        document.getElementById("project-description").value =
          project.description || "";
        document.getElementById("project-status").value =
          project.project_status;

        openProjectModal();
      }

      // Excluir projeto
      async function deleteProject(projectId) {
        if (!confirm("Tem certeza que deseja excluir este projeto?")) return;

        try {
          const response = await fetch(
            `/api/users/${userId}/projects/${projectId}`,
            {
              method: "DELETE",
            }
          );

          if (response.ok) {
            loadProjects();
            showSuccessToast("Projeto exclu√≠do com sucesso!");
          } else {
            const errorData = await response.json();
            throw new Error(errorData.error || "Erro ao excluir projeto");
          }
        } catch (error) {
          console.error("Erro ao excluir projeto:", error);
          showErrorToast("Erro ao excluir projeto");
        }
      }

      // Alternar status ativo/inativo do projeto
      async function toggleProjectStatus(projectId, isActive) {
        try {
          const project = allProjects.find((p) => p.id === projectId);
          const projectData = {
            project_name: project.project_name,
            description: project.description,
            project_status: project.project_status,
            is_active: isActive,
            user_id: parseInt(userId),
          };

          const response = await fetch(
            `/api/users/${userId}/projects/${projectId}`,
            {
              method: "PUT",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify(projectData),
            }
          );

          if (response.ok) {
            loadProjects();
            showSuccessToast(
              isActive ? "Projeto ativado!" : "Projeto desativado!"
            );
          } else {
            throw new Error("Erro ao alterar status do projeto");
          }
        } catch (error) {
          console.error("Erro ao alterar status:", error);
          showErrorToast("Erro ao alterar status do projeto");
        }
      }

      // Controle de estados
      function showLoading() {
        hideAllStates();
        document.getElementById("loading").style.display = "block";
      }

      function showProjectsContent() {
        hideAllStates();
        document.getElementById("projects-content").style.display = "block";
      }

      function showEmptyState() {
        hideAllStates();
        document.getElementById("empty-state").style.display = "block";
      }

      function showErrorState() {
        hideAllStates();
        document.getElementById("error-state").style.display = "block";
      }

      function hideAllStates() {
        document.getElementById("loading").style.display = "none";
        document.getElementById("projects-content").style.display = "none";
        document.getElementById("empty-state").style.display = "none";
        document.getElementById("error-state").style.display = "none";
      }

      // Modal functions
      function openCreateProjectModal() {
        isEditMode = false;
        editingProjectId = null;

        document.getElementById("modal-title").textContent = "Novo Projeto";
        document.getElementById("submit-text").textContent = "Criar Projeto";
        document.getElementById("submit-icon").textContent = "‚úÖ";

        document.getElementById("project-form").reset();
        openProjectModal();
      }

      function openProjectModal() {
        document.getElementById("project-modal").style.display = "flex";
        document.body.style.overflow = "hidden";
      }

      function closeProjectModal() {
        document.getElementById("project-modal").style.display = "none";
        document.body.style.overflow = "auto";
        document.getElementById("project-form").reset();
      }

      // Filtros e busca
      function setupEventListeners() {
        // Filtros
        document
          .getElementById("filter-status")
          .addEventListener("change", applyFilters);
        document
          .getElementById("search-projects")
          .addEventListener("input", applyFilters);

        // Form submit
        document
          .getElementById("project-form")
          .addEventListener("submit", handleFormSubmit);

        // Modal click outside
        document
          .getElementById("project-modal")
          .addEventListener("click", (e) => {
            if (e.target.id === "project-modal") closeProjectModal();
          });
      }

      function applyFilters() {
        const statusFilter = document.getElementById("filter-status").value;
        const searchQuery = document
          .getElementById("search-projects")
          .value.toLowerCase();

        filteredProjects = allProjects.filter((project) => {
          // Status filter
          if (statusFilter !== "all" && project.project_status !== statusFilter)
            return false;

          // Search filter
          if (
            searchQuery &&
            !project.project_name.toLowerCase().includes(searchQuery) &&
            !(project.description || "").toLowerCase().includes(searchQuery)
          )
            return false;

          return true;
        });

        renderProjects();
      }

      async function handleFormSubmit(e) {
        e.preventDefault();

        const formData = new FormData(e.target);

        const projectData = {
          project_name: formData.get("project_name"),
          description: formData.get("description") || null,
          project_status: formData.get("project_status"),
          is_active: true,
          user_id: parseInt(userId),
        };

        console.log("Dados enviados:", projectData);

        try {
          showModalLoading();

          let response;
          if (isEditMode) {
            // Incluir ID para update
            projectData.id = parseInt(editingProjectId);
            response = await fetch(
              `/api/users/${userId}/projects/${editingProjectId}`,
              {
                method: "PUT",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(projectData),
              }
            );
          } else {
            response = await fetch(`/api/users/${userId}/projects`, {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify(projectData),
            });
          }

          if (response.ok) {
            closeProjectModal();
            loadProjects();
            showSuccessToast(
              isEditMode ? "Projeto atualizado!" : "Projeto criado!"
            );
          } else {
            const errorData = await response.json();
            throw new Error(errorData.error || "Erro ao salvar projeto");
          }
        } catch (error) {
          console.error("Erro ao salvar projeto:", error);
          showErrorToast(error.message);
        } finally {
          hideModalLoading();
        }
      }

      // Modal loading
      function showModalLoading() {
        document.getElementById("project-modal-loading").style.display =
          "block";
        document.getElementById("submit-project-btn").disabled = true;
      }

      function hideModalLoading() {
        document.getElementById("project-modal-loading").style.display = "none";
        document.getElementById("submit-project-btn").disabled = false;
      }

      // Toasts
      function showSuccessToast(message) {
        showToast(message, "success");
      }

      function showErrorToast(message) {
        showToast(message, "error");
      }

      function showToast(message, type) {
        const toast = document.createElement("div");
        toast.className = `toast toast-${type}`;
        toast.innerHTML = `
          <span class="toast-icon">${type === "success" ? "‚úÖ" : "‚ùå"}</span>
          <span>${message}</span>
        `;

        document.body.appendChild(toast);
        setTimeout(() => toast.classList.add("show"), 100);

        setTimeout(() => {
          toast.classList.remove("show");
          setTimeout(() => document.body.removeChild(toast), 300);
        }, 3000);
      }

      // Navigation
      function goToWelcome() {
        window.location.href = `/users/${userId}`;
      }

      function goToTasks() {
        window.location.href = `/users/${userId}/tasks`;
      }
    </script>
  </body>
</html>
